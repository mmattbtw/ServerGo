schema {
  query: Query
  mutation: Mutation
}

type Mutation {
  # Edit an emote. Requires permission.
  editEmote(emote: EmoteInput!, reason: String): Emote
  # Delete an emote. Requires permission.
  deleteEmote(id: String!, reason: String!): Boolean
  # Restore an emote that has been deleted. Requires permission.
  restoreEmote(id: String!, reason: String): Response
  # Merge an emote into another emote, transferring all its channels and swapping aliases
  mergeEmote(old_id: String!, new_id: String!, reason: String!): Emote
  # Add an emote to a channel. Requires permission.
  addChannelEmote(channel_id: String!, emote_id: String!, reason: String): User
  # Edit a channel emote with overrides
  editChannelEmote(channel_id: String!, emote_id: String!, data: ChannelEmoteInput!, reason: String): User
  # Remove an emote from a channel. Requires permission.
  removeChannelEmote(channel_id: String!, emote_id: String!, reason: String): User
  # Add an editor to a channel. Requires permission.
  addChannelEditor(channel_id: String!, editor_id: String!, reason: String): User
  # Remove an editor from a channel. Requires permission.
  removeChannelEditor(channel_id: String!, editor_id: String!, reason: String): User
  # Report an emote. Requires login.
  reportEmote(emote_id: String!, reason: String!): Response
  # Report a user. Requires login.
  reportUser(user_id: String!, reason: String): Response
  # Edit a user
  editUser(user: UserInput!, reason: String): User
  # Ban a user. Requires permission.
  banUser(victim_id: String!, expire_at: String, reason: String): Response
  # Unban a user. Requires permission.
  unbanUser(victim_id: String!, reason: String): Response
  # Mark a notification as read
  markNotificationsRead(notification_ids: [String!]!): Response
  # Edit the application
  editApp(properties: MetaInput!): Response
  # Create a new Entitlement
  createEntitlement(kind: EntitlementKind!, data: EntitlementCreateInput!, user_id: String!): Response
  # Delete an Entitlement
  deleteEntitlement(id: String!): Response
}

type Response {
  # Deprecated: use ok to check success
  status: Int!
  # Whether or not the request succeeded
  ok: Boolean!
  # Message in response
  message: String!
}

type Query {
  # Get audit logs
  audit_logs(page: Int!, limit: Int, types: [Int!]): [AuditLog!]!
  # Get emote by id.
  emote(id: String!): Emote
  # Get emotes by user id.
  emotes(list: [String!]!): [Emote]
  # Search for emotes.
  search_emotes(
    query: String!, limit: Int,
    page: Int, pageSize: Int,
    globalState: String, sortBy: String, sortOrder: Int,
    channel: String, submitted_by: String, filter: EmoteFilter
  ): [Emote]!
  #
  third_party_emotes(
    providers: [Provider!]!,
    channel: String!
    global: Boolean
  ): [Emote]
  # Get a user by id, login or current authenticated user (@me).
  user(id: String!): User
  #  Get a role by id
  role(id: String!): Role
  # Search for users.
  search_users(query: String!, page: Int, limit: Int): [UserPartial]!
  # Get featured stream
  featured_broadcast(): String!
  # Get meta
  meta(): Meta
}

input EmoteFilter {
  width_range: [Int!]
  visibility: Int
  visibility_clear: Int
}

input EmoteInput {
  # Id of the emote
  id: String!
  # name of the emote
  name: String
  # id of the owner of the emote
  owner_id: String
  # visibility of the emote
  visibility: Int
  # tags for this emote
  tags: [String!]
}

input UserInput {
  # ID of the user
  id: String!
  # User's Role ID
  role_id: String
  # User's allowed channel emote slots (0 = use default)
  emote_slots: Int
  # Edit the selected Paint
  cosmetic_paint: String
  # Edit the selected Badge
  cosmetic_badge: String
}

input ChannelEmoteInput {
  alias: String
}

input MetaInput {
  featured_broadcast: String
}

enum EntitlementKind {
  SUBSCRIPTION
  BADGE
  PAINT
  ROLE
  EMOTE_SET
}

# Data for an Entitlement
# Only a single field can be picked
input EntitlementCreateInput {
  subscription: EntitledSubscription
  badge: EntitledBadge
  paint: EntitledPaint
  role: EntitledRole
  emote_set: EntitledEmoteSet
}

# Subscription entitlement data
input EntitledSubscription {
  id: String!
}

# Badge entitlement data
input EntitledBadge {
  id: String!
  selected: Boolean!
  role_binding_id: String
}

# Paint entitlement data
input EntitledPaint {
  id: String!
  selected: Boolean!
  role_binding_id: String
}

# Role entitlement data
input EntitledRole {
  id: String!
}

# Emote Set entitlement data
input EntitledEmoteSet {
  id: String!
  unicode_tag: String!
  emote_ids: [String!]!
}

type AuditLog {
  id: String!
  timestamp: String!
  type: Int!
  action_user_id: String!
  action_user: UserPartial
  target: AuditLogTarget!
  changes: [AuditLogChange!]!
  reason: String
}

type AuditLogTarget {
  id: String!
  data: String!
  type: String!
}

type AuditLogChange {
  key: String!
  values: [String!]!
}

enum Provider {
  BTTV
  FFZ
}

input ThirdPartyEmoteOptions {
  providers: [String!]!
  channel: String!
  global: Boolean
}

type Emote {
  # Id of the emote
  id: String!
  # name of the emote
  name: String!
  # id of the owner of the emote
  owner_id: String!
  # visibility of the emote
  visibility: Int!
  # the mime/content-type of the emote
  mime: String!
  # the emote status
  status: Int!
  # tags for this emote
  tags: [String!]!
  # date of creation
  created_at: String!
  # Get audit log entries for this emote.
  audit_entries: [AuditLog!]
  # Get the channels the emote is added to
  channels(page: Int, limit: Int): [UserPartial]
  # Get the amount of channels the emote is added to
  channel_count: Int!
  # Get the owner of this emote.
  owner: User
  # Get the reports on emote. Requries Permission.
  reports: [Report]
  # The provider of this emote
  provider: String!
  # The third party provider's ID definition of this emote, if the provider is not 7TV
  provider_id: String
  # CDN URLs to this emote
  urls: [[String!]!]!
  # Get the amount of channels this emote is added to
  channel_count: Int!
  # Get the width of the emote in pixels
  width: [Int!]!
  # Get the height of the emote in pixels
  height: [Int!]!
}

type User {
  # id of this user
  id: String!
  # email of this user
  email: String
  # rank of this user
  rank: Int! @deprecated
  # user descriptino
  description: String!
  # role of this user
  role: Role!
  # emotes of this user
  emote_ids: [String!]!
  # emote aliases of this user
  emote_aliases: [[String!]!]!
  # editor ids for this user
  editor_ids: [String!]!
  # date of creation
  created_at: String!
  # twitch id
  twitch_id: String!
  # twitch display name
  display_name: String!
  # twitch login
  login: String!
  # twitch broadcaster type
  broadcaster_type: String!
  # twitch profile picture
  profile_image_url: String!
  # YouTube ID
  youtube_id: String!
  # date of pair
  created_at: String!
  # Get the emotes added to this users channel.
  emotes: [Emote!]!
  # Get the emotes this user has uploaded.
  owned_emotes: [Emote!]!
  # Get the third party emotes of this users channel. (BTTV/FFZ)
  third_party_emotes: [Emote!]!
  # Get the editors of this user.
  editors: [UserPartial!]!
  # Get where this user is an editor.
  editor_in: [UserPartial!]!
  # Get the reports on this uer. Requries Permission.
  reports: [Report]
  # Get the logs on this user. Requries Permission.
  audit_entries: [AuditLog!]
  # Get the bans on this user. Requries Permission.
  bans: [Ban!]
  # Get whether the user is banned
  banned: Boolean!
  # Get the user's maximum channel emote slots
  emote_slots: Int!
  # Get the user's follower count
  follower_count: Int!
  # Get the user's current live broadcast
  broadcast: Broadcast
  # Get the user's most recent notifications
  notifications: [Notification]!
  # Get amount of unread notifications this user has
  notification_count: Int!
  # Cosmetics
  cosmetics: [UserCosmetic]!
}

type UserCosmetic {
  id: String!
  kind: String!
  name: String!
  selected: Boolean!
  data: String!
}

type UserPartial {
  # id of this user
  id: String!
  # email of this user
  email: String
  # rank of this user
  rank: Int!
  # role of this user
  role: Role!
  # emotes of this user
  emote_ids: [String!]!
  # editor ids for this user
  editor_ids: [String!]!
  # date of creation
  created_at: String!
  # twitch id
  twitch_id: String!
  # twitch display name
  display_name: String!
  # twitch login
  login: String!
  # twitch profile picture
  profile_image_url: String!
}

type Role {
  id: String!
  name: String!
  position: Int!
  color: Int!
  allowed: String!
  denied: String!
}

type Report {
  # The user id of the reporter.
  reporter_id: String
  # The user/emote id of the reported.
  target_id: String
  # The type that was reported either user or emote.
  target_type: String!
  # The reason of the report.
  reason: String!
  # If a moderator has marked this as cleared.
  cleared: Boolean!
  # The user target of this report filled if target_type is user.
  u_target: UserPartial
  # The emote target of this report filled if the target_type is emote.
  e_target: Emote
  # The reporter who reported this emote.
  reporter: UserPartial
  # Logs of this report.
  audit_entries: [String!]!
}

type Ban {
  # ID of the ban.
  id: String!
  # user who got banned's id.
  user_id: String
  # Reason they got banned.
  reason: String!
  # ban is still active.
  active: Boolean!
  # Who banned the user.
  issued_by_id: String
  # The user who got banned.
  user: UserPartial
  # The moderator who banned them.
  issued_by: UserPartial
}

type Meta {
  announcement: String!
  featured_broadcast: String!
  roles: [String!]!
}

type Broadcast {
  id: String!
  title: String!
  thumbnail_url: String!
  viewer_count: Int!
  type: String!
  game_name: String!
  game_id: String!
  language: String!
  tags: [String!]!
  mature: Boolean!
  started_at: String!
  user_id: String!
}

type Notification {
  # The ID of the notification
  id: String!
  # Whether the notification is available to all users on the platform
  announcement: Boolean!
  # The title of the notification
  title: String!
  # When this notification was created
  timestamp: String!
  # The notification's formattable message parts
  message_parts: [NotificationMessagePart!]!

  # The users mentioned in this notification
  users: [UserPartial]!
  # The emotes mentioned in this notification
  emotes: [Emote]!
  # Whether the notification has been read
  read: Boolean!
  # When this notification was read
  read_at: String
}

type NotificationMessagePart {
  type: Int!
  data: String!
}
